- 登入界面

  - 用一个单独的 php 页面将要用到的函数进行封装，特别是检测登入，要为每一个页面引入

  - 在 login.php 页面，用 post 方式将填入的用户名与密码传递到本页

  - 依靠 $_SERVER['REQUEST_METHOD'] 值是否为 post 来使本页判断是否进行验证处理

  - 将输入的用户名与数据库中的已有的用户名比较，如果没有则进行报错

  - 若用户名一致，再去验证密码

  - 若二者一致，开启 session ，跳转到主页面

- 主页面

  - 侧边栏
    
    - 由于侧边栏属于多个页面共有，将这部分代码单独提取到一个页面，别的页面可以直接引用

    - 当页面位于主页面时，要让侧边栏对应的栏目显示高亮

    - 在主页面 index.php 中设置一个参数 $active = 'dashboard'

    - 用 php 与 html 混写的方式，对参数进行判断，如果有这个参数，付给栏目一个类名

  - 头部

    - 由于头部也是多个页面共有，将这部分代码单独提取到一个页面，别的页面可以直接引用
 
    - 退出登入
  
      - 创建一个 logout.php 页面

      - 利用代码 unset($_SESSION['is_login']) 移除 session，并将页面重新跳转到 login.php

  - 利用 SQL COUNT 语句，获得需要数据，拼接到页面上

- 文章页面

  - 所有文章

    - 引入函数页面，验证登入

    - 运用 SQL 语句去数据库查询数据

    - 运用数组遍历，html 与 php 混写将数据添加到页面上

    - 分页操作

      - 通过点击页码传递页码参数

      - 规定一页上显示的数据条数，总的页数，当前页面有几个页码

      - 由于要求当前页码总在中间，只要求得起始页码和结束页码即可

      - 利用公式 起点：ceil($page - $pages / 2)，终点：$start + $pages - 1

      - 用 range($start, $end) 生成一串页码 

      - 规定页码的左右边界，防止越界

      - 利用 SQL 语句 LIMIT 依据传递过来的页码数据选取截取起点 offset

      - 为防止有人改变页码参数过小或过大，对边界进行规定

      - 利用参数对页码进行样式设置
      
    - 删除文章

      - 在页面上删除按钮设置参数 ?action=delet&id=

      - 利用 id 配合 SQL 语句删除要删除的文章

  - 写文章

    - 由于要有图片预览效果，考虑文本信息通过表单进行提交，图片预览利用 ajax 进行操作

    - 引入函数页面，验证登入

    - 利用 $_SERVER['REQUEST_METHOD'] 来判断和处理参数

    - 用 SQL 语句将数据添加到数据库

    - 利用 ajax 时后台将文件的路径传递过来，注意使用 xhr2 中的 new FormData();

    - 利用 dom 操作 img 标签的 src 的值，是图片显示出来
      
    - 利用 input hidden 来传递图片路径，表单提交数据

    - 由于管理员不止一位，取用 input hidden 将用户的 id 再传给数据库

  - 分类目录

    - 利用传递数据的不同，在同一页面进行增删改查的操作

    - 添加数据

      - 利用混写将按钮字样改为 ‘添加’

      - 将表单提交方式设置为 get，action=add 是默认参数

      - 利用表单提交，将数据(包括 input hidden 设置的 id，方便以后更改删除)传给后台

      - 利用 SQL 语句和 html php 混写将数据在页面上显示出来

    - 删除数据

      - 单个删除

        - 利用传递的数据 action=delete id 配合 SQL 语句删除数据即可

      - 批量删除

        - 利用 js 操作，利用数组 ids 记录选中的数据 id

        - 利用 dom 为全删按钮设置 属性 'href', '?action=delete&ids=' + ids.join(',')

        - 利用 input click 触发事件，将 id 加入(push)到 ids 中，同时记录数据 id 的个数

        - 考虑到重复点击同一数据的情况，要删除重复的 id

        - 判断 id 个数为零时，隐藏全删按钮

        - 用 ids 配合 SQL DELET 语句进行删除

      - 改动已有数据

        - 分两步：查找旧数据，将新数据添加到数据库

          - 查找旧数据

            - 需要两个参数，点击改动时 action=edit 点击修改后 action=update

            - 利用 id 配合 SQL html php 混写将数据显示到输入框中

            - 利用混写将按钮字样改为 ‘更改’

          - 将新数据添加到数据库

            - 判断 action=update 后，利用 SQL 语句更新数据

            - 跳转到原页面

      - 导入数据

        - 直接去数据库 利用 SQL 混写 遍历使数据在页面上显示

- 评论页面

  - 利用 AMD 引入分页，进度条，模板引擎，时间格式化等插件

  - 利用 comments-lists.php 页面进行数据的获取，响应体是 json 格式的数据

  - 建立 comments.js 页面利用 ajax 进行数据的获取

  - 在 js 页面利用模板引擎将数据加到评论页面上

  - 利用 comments-delete.php 进行删除操作，原理是利用传递的 id
 

        